<?xml version="1.0" encoding="UTF-8"?>
<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="messagecollection.xsd">
	<Plugin>
		<ShortDescription>FindBugs Plugin for Scala</ShortDescription>
		<Details>Provides detectors to detector Scala bug patterns.</Details>
	</Plugin>

	<!-- ************************* Detectors ***************************************** -->

	<!-- #1 Qi Wang -->
	<Detector
		class="cn.edu.sjtu.stap.detector.scala.WrongEqualsOrHashcodeDetector">
		<Details></Details>
	</Detector>
	<Detector class="cn.edu.sjtu.stap.detector.scala.OptionCompNullDetector">
		<Details>
		</Details>
	</Detector>
	<Detector
		class="cn.edu.sjtu.stap.detector.scala.UseVarDefineHashCodeDetector">
		<Details>
		</Details>
	</Detector>
	<Detector class="cn.edu.sjtu.stap.detector.scala.NilListInMatchDetector">
		<Details>
		</Details>
	</Detector>
	<Detector
		class="cn.edu.sjtu.stap.detector.scala.MultiAssignWithPatternDetector">
		<Details>
		</Details>
	</Detector>
	<Detector class="cn.edu.sjtu.stap.detector.scala.HangingVarOrConstDetector">
		<Details>
		</Details>
	</Detector>
	<Detector class="cn.edu.sjtu.stap.detector.scala.EmptyRangeDetector">
		<Details>
		</Details>
	</Detector>
	<Detector class="cn.edu.sjtu.stap.detector.scala.DeadCodeReturnDetector">
		<Details>
		</Details>
	</Detector>
	<Detector class="cn.edu.sjtu.stap.detector.scala.UseImmutableInLoopDetector">
		<Details>
		</Details>
	</Detector>
	<Detector
		class="cn.edu.sjtu.stap.detector.scala.CompareAssignedValueDetector">
		<Details>Find comparing the return value of assignment with other
			value
		</Details>
	</Detector>
	<Detector class="cn.edu.sjtu.stap.detector.scala.TypeEraseDetector">
		<Details>
		</Details>
	</Detector>
	<Detector
		class="cn.edu.sjtu.stap.detector.scala.FirstLetterLowerInMatchDetector">
		<Details>
		</Details>
	</Detector>

	<!-- #2 Yudi Zheng -->
	<Detector class="cn.edu.sjtu.se.yudiZheng.UnreachableCodeDetector">
		<Details>
		<![CDATA[
		<p> Checks for unreachable code inside a method. NOTE THAT unreachable code can be generated using BCEL or ASM. </p> 
		]]>
		</Details>
	</Detector>
	<Detector class="cn.edu.sjtu.se.yudiZheng.CaseClassInheritanceDetector">
		<Details>
		<![CDATA[
		<p> Checks for inheritance of case classes. This can cause buggy behavior while comparing two instances from these kind of case classes. </p> 
		]]>
		</Details>
	</Detector>

	<!-- #3 Shunping Wang -->
	<Detector class="cn.edu.sjtu.se.shunpingWang.ScalaFindPuzzlers">
		<Details>
			<![CDATA[
				<p> ScalaFindPuzzlers detect </p>
			]]>
		</Details>
	</Detector>
	<Detector class="cn.edu.sjtu.se.shunpingWang.ScalaHEmismatch">
		<Details>
			<![CDATA[
				<p> ScalaHEmismatch detect </p>
			]]>
		</Details>
	</Detector>

	<!-- #4 Shuang Qiu -->
	<Detector class="cn.edu.sjtu.se.shuangQiu.PartialInitializedObjectDetector">
		<Details>
			<![CDATA[
				<p> This detector finds unordered initialization sequence. </p>
				<p>
					Consider the following inherent hierarchy:
  					<code>
    					public class Base{
        					public Base() { foo(); }
        					public void foo() {};
    					}

    					public class Sub extends Base{
        					public Sub() {};
        					@Override
        					public void foo() {};
    					}
  					</code>
				Now the test code <code> Sub s = new Sub(); </code> constructor of <code>Base</code> will in fact invoke <code>foo()</code> of class <code>Sub</code> though object <code>s</code> is partially initialized.
				</p>
			]]>
		</Details>
	</Detector>

	<!-- #5 Zhenbang Liu -->
	<Detector class="cn.edu.sjtu.se.zhenbangLiu.CheckRepeatedCondition">
		<Details> 
 		<![CDATA[ 
 			<p>This detector looks for repeated conditional test in scala.</p>
 		]]>
		</Details>
	</Detector>

	<!-- #6 Tao Liu -->
	<Detector class="cn.edu.sjtu.se.taoLiu.VarInHashCodeDetector">
		<Details>
		<![CDATA[
		<p>var should not be used in hashCode.</p>
		]]>
		</Details>
	</Detector>

	<!-- #7 Chang Liu -->
	<Detector class="cn.edu.sjtu.se.changLiu.EquivalentJudgmentBugDetector">
		<Details>
			<![CDATA[
            <p>Potential bug of equivalent judgment.</p>
			]]>
		</Details>
	</Detector>

	<!-- #8 Zhijing Wu -->
	<Detector class="cn.edu.sjtu.se.zhijingWu.StrReplaceDetector">
		<Details>
		  <![CDATA[
		  <p>Checks the misuse of string.replace(char,char)  </p>
		  ]]>
		</Details>
	</Detector>

	<!-- #9 Ling Sun -->
	<Detector class="cn.edu.sjtu.se.lingSun.FindBadForLoopScala">
		<Details>
	<![CDATA[
		<p> This detector looks for incorrect for loops.
		</p>
	]]>
		</Details>
	</Detector>

	<!-- #10 Mingrui Zhang -->
	<Detector class="cn.edu.sjtu.se.mingruiZhang.EmptyRangeDetector">
		<Details>
          <![CDATA[
          <p>Potential bug of generating empty Range with decending parameters. </p>
          ]]>
		</Details>
	</Detector>

	<!-- #11 Gang Zhang -->
	<Detector class="cn.edu.sjtu.se.gangZhang.MethodUseGenericDetect">
		<Details> 
 	<![CDATA[ 
 		<p> This detector finds methods misuse generic type to process type matching,but generic type 
 		will be erased during the compiling.
 	]]>
		</Details>
	</Detector>
	<Detector class="cn.edu.sjtu.se.gangZhang.ExceptionOrderDetect">
		<Details> 
 	<![CDATA[ 
 		<p> This detector finds try-catch module in which there exist many exceptions to be caught
 		but exceptions order and exceptions class Hierarchy are ignored by mistake. 
 	]]>
		</Details>
	</Detector>

	<!-- #12 Mengping Li -->
	<Detector class="cn.edu.sjtu.se.mengpingLi.MissHashCodeDetector">
		<Details>
	  <![CDATA[
		<p>Potential bug of override equals method but don't orverride hashCode()</p>
	 	]]>
		</Details>
	</Detector>

	<Detector class="cn.edu.sjtu.se.mengpingLi.MissExceptionHandlerDetector">
		<Details>
	  <![CDATA[
<h1>Miss ExceptionHandler</h1>
</hr>
<p><b>e.g.</b></p>
<p>
1.&nbsp;&nbsp;object A extends Actor {    <br/>
2.&nbsp;&nbsp;&nbsp;&nbsp;def act() {    <br/>
3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;react {    <br/>
4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'hello =>    <br/>
5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Exception("Error!")    <br/>
6.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}    <br/>
7.&nbsp;&nbsp;&nbsp;&nbsp;}   <br/>
8.&nbsp;&nbsp;}<br/>
</p>
	]]>
		</Details>
	</Detector>
	
	<!-- #13 Dingkun Yang -->
	<Detector class="cn.edu.sjtu.se.dingkunYang.ScalaMatchWithoutDefault">
    <Details>
<![CDATA[
<p>Only in Scala language, match-case block does not have the default case.
</p>
]]>
    </Details>
  </Detector>
	
	<!-- #14 Weicheng Yang -->
	<Detector class="cn.edu.sjtu.se.weichengYang.detector.scala.FirstLetterLowerInMatchDetector">
		<Details> </Details>
	</Detector>

	<!-- #15 Puyu Duan -->
	<Detector class="cn.edu.sjtu.se.puyuDuan.StrAndCharMethodConfusing">
		<Details>
			<![CDATA[
            <p>Potential bug of confusing used method of Character</p>
			]]>
		</Details>
	</Detector>
	
	<!-- #16 Jun Wang -->
	<Detector class="cn.edu.sjtu.se.junWang.ClassesInPackageObjectDetector">
        <Details>
<![CDATA[
<p>Classes shoud not be defined in a package object.</p>
]]>
        </Details>
    </Detector>
    
    <Detector class="cn.edu.sjtu.se.junWang.VarNotReassignedDetector">
        <Details>
<![CDATA[
<p>var defined but never re-assigned.</p>
]]>
        </Details>
    </Detector>
    
    
    <!-- #17 Zilong Wang -->
    <Detector class="cn.edu.sjtu.se.zilongWang.CircularDependenciesDetector">
	  <Details>
		  <![CDATA[
<p>Potential bug of CircularDependencies</p>
		  ]]>
	  </Details>
  </Detector>
  
  <!-- #18 Yintian Wang -->
  <Detector class="cn.edu.sjtu.se.yintianWang.FindSameBranchCode">
    <Details>
<![CDATA[
<p> Find uses of same code for different if branch or match branch of the scala
</p>
]]>
     </Details>
  </Detector>
  
  <!-- #19 Renjie Qiu -->
  <Detector class="cn.edu.sjtu.se.renjieQiu.FindReceiveInLoop">
    <Details>
        <![CDATA[
            This detector finds using 'loop' with 'receive' in Scala Actor. 
            ]]>
    </Details>
  </Detector>
  
  <!-- #20 Yuan Zhao -->
  <Detector class="cn.edu.sjtu.se.yuanZhao.ImplicitConversionDetector">
  <Details>
  <![CDATA[
  ]]>
  </Details>
  </Detector>
  
	<!-- #21 Zheng Wang-->
	<Detector class="cn.edu.sjtu.se.zhengWang.StoreBeforeReturnDetector">
	  <Details>
<![CDATA[
<p>Potential bug of misusing scala.Option</p>
]]>
	  </Details>
  </Detector>
	
	<!-- #22 Xi Jia -->
	<Detector class="cn.edu.sjtu.se.xiJia.CheckImplicitDetector">
		<Details>
			<![CDATA[
            <p>Potential bug of misusing Implicit on Syntactic sugar</p>
			]]>
		</Details>
	</Detector>
	
	<!-- #23 Xinglong Tan -->
	<Detector class="cn.edu.sjtu.se.xinglongTan.BitwiseSignedByte">
		<Details>
			Finds instances of Bitwise IOR of Signed Byte
		</Details>
	</Detector>
	
	<!-- #24 Jieliang Dong -->
	<Detector class="cn.edu.sjtu.se.jieliangDong.FindReturnDetector">
		<Details>
			<![CDATA[
            <p>Potential bug of return missing</p>
			]]>
		</Details>
	</Detector>
	
	
	

	<!-- ************************* Bug Patterns ***************************************** -->

	<!-- #1 Qi Wang -->
	<BugPattern type="USE_IMMUT_COLLECTION_IN_LOOP">
		<ShortDescription>在循环中对不可变容器添加元素</ShortDescription>
		<LongDescription>在循环中对不可变容器添加元素</LongDescription>
		<Details> <![CDATA[ <p>scala默认使用的集合类型是immutable的，在一个循环中大量次数对immutable集合添加元素性能将低于使用mutable的集合来完成相同的功能。</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="HANING_VAR_OR_CONST">
		<ShortDescription>没有被使用的常量、变量 (非函数)</ShortDescription>
		<LongDescription>没有被使用的常量、变量 (非函数)</LongDescription>
		<Details> <![CDATA[ <p>Scala中允许一个常量、变量放在一行中，不参与任何表达式。如果这些东西被不小心混入到其他表达式中将会引起bug。</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="EMPTY_RANGE">
		<ShortDescription>递减参数生成的Range为空</ShortDescription>
		<LongDescription>递减参数生成的Range为空</LongDescription>
		<Details> <![CDATA[ <p>"1 to 4 = Range(1,2,3,4)"，但是"-1 to -4 = Range()"。递减参数生成的Range为空，运行时不会报错，程序有可能由于没有处理（交换起止值）这种特殊情况而造成逻辑错误（迭代没有进行）。</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="RELUCANT_RETURN">
		<ShortDescription>无分支函数多重return使得代码冗余</ShortDescription>
		<LongDescription>无分支函数多重return使得代码冗余</LongDescription>
		<Details> <![CDATA[ <p>在一个无分支的函数定义中包含多重return，造成第一个return的后续代码无效。</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="NO_RETURN_TYPE_FOR_FUNC">
		<ShortDescription>方法体有返回值，定义方法时没有在方法体前加=号</ShortDescription>
		<LongDescription>方法体有返回值，定义方法时没有在方法体前加=号</LongDescription>
		<Details> <![CDATA[ <p>如果去掉方法体前面的等号，那么方法的结果必定是Unit，方法体里不管返回什么都成立。</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="DEFINE_EQUALS_NO_HASHCODE">
		<ShortDescription>定义equals,但没有同时定义hashCode</ShortDescription>
		<LongDescription>定义equals,但没有同时定义hashCode</LongDescription>
		<Details> <![CDATA[ <p>定义equals,但没有同时定义hashCode</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="DEFINE_HASHCODE_NO_EQUALS">
		<ShortDescription>定义hashCode,但没有同时定义equals</ShortDescription>
		<LongDescription>定义hashCode,但没有同时定义equals</LongDescription>
		<Details> <![CDATA[ <p>定义hashCode,但没有同时定义equals</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="USE_VAR_DEFINE_HASHCODE">
		<ShortDescription>使用可变的字段定义类的hashCode方法</ShortDescription>
		<LongDescription>使用可变的字段定义类的hashCode方法</LongDescription>
		<Details> <![CDATA[ <p>基于hash的集合类型(如HashSet)中，该集合通过对象的hashCode()计算出的hash值来存储和查找该对象，使用可变的字段定义hashCode方法，储存进集合中后，如果可变字段改变，将计算出新的hash值，因此将无法从该集合中获取该对象</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="WRONG_EQUALS_SIG">
		<ShortDescription>使用错误的签名重载类的equals方法</ShortDescription>
		<LongDescription>使用错误的签名重载类的equals方法</LongDescription>
		<Details> <![CDATA[ <p>scala中用于比较两个对象的相等的equals方法的签名为   def equals(o:Any),使用错误的签名(参数类型不使用Any),只是相当于为类添加了一个方法, 对象cast为父类对象后，调用equals方法不会动态绑定到新定义的equals方法，从而引起错误。</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="WRONG_HASHCODE_SIG">
		<ShortDescription>hashCode函数签名错误</ShortDescription>
		<LongDescription>hashCode函数签名错误</LongDescription>
		<Details> <![CDATA[ <p>hashCode函数签名错误。</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="NIL_LIST_IN_MATCH">
		<ShortDescription>Nil和List()同时出现在match匹配</ShortDescription>
		<LongDescription>Nil和List()同时出现在match匹配</LongDescription>
		<Details> <![CDATA[ <p>List()与Nil相等。在Match匹配中Nil可置于List()之前。List()匹配时将先与Nil匹配。</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="STR_UNDERLINE_IN_MATCH">
		<ShortDescription>scala中匹配表达式与下划线(_)出错</ShortDescription>
		<LongDescription>scala中匹配表达式与下划线(_)出错</LongDescription>
		<Details> <![CDATA[ <p>case _ 程序员可能误输入成 case "_"。</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="FIRST_LETTER_LOWER_IN_MATCH">
		<ShortDescription>在模式匹配中匹配第一个字母小写的对象或变量</ShortDescription>
		<LongDescription>在模式匹配中匹配第一个字母小写的对象或变量</LongDescription>
		<Details> <![CDATA[ <p>第一个字母小写，在模式匹配中将作为匹配变量，能匹配任何值.</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="COMPARE_OPTION_NULL">
		<ShortDescription>将返回Option类型的函数的返回值和null进行比较</ShortDescription>
		<LongDescription>将返回Option类型的函数的返回值和null进行比较</LongDescription>
		<Details> <![CDATA[ <p>受java编程习惯的影响，从map中取值，先判断是否为null.在scala中，map的返回值为Option类型，如果不存在对应的键值，则返回None.None和null比较永远为false，因此引入错误.</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="COMP_ASSIGNED_VALUE">
		<ShortDescription>将赋值 表达式的值用于判断</ShortDescription>
		<LongDescription>将赋值 表达式的值用于判断</LongDescription>
		<Details> <![CDATA[ <p>在scala中,赋值表达式的值为Unit 所以java的一些习惯，使用赋值后的值进行比较，将引入错误.</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="MUTIL_ASSIGN_VIA_PATTERN">
		<ShortDescription>使用模式匹配进行赋值</ShortDescription>
		<LongDescription>使用模式匹配进行赋值</LongDescription>
		<Details> <![CDATA[ <p>通过模式匹配进行赋值，不进行类型检查,编译时不报错，运行时出错</p> ]]>
		</Details>
	</BugPattern>
	<BugPattern type="TYPE_ERASE_IN_MATCH">
		<ShortDescription>泛型参数类型擦除</ShortDescription>
		<LongDescription>泛型参数类型擦除</LongDescription>
		<Details> <![CDATA[ <p>Scala中只有数组类型在编译时被保留，其他数据结构的泛型参数会被擦除。使用带参数类型的数据结构进行模式匹配时，将只匹配类型，而不匹配参数类型.</p> ]]>
		</Details>
	</BugPattern>

	<!-- #2 Yudi Zheng -->
	<BugPattern type="UNREACHABLE">
		<ShortDescription> Unreachable code </ShortDescription>
		<LongDescription> Unreachable code detected. </LongDescription>
		<Details>Unreachable code is detected inside this method. Analysis
			based on control flow graph might now be applied in these code, e.g.
			ASM analyzer.
		</Details>
	</BugPattern>
	<BugPattern type="CASE_INHERIT">
		<ShortDescription> Case class inheritance </ShortDescription>
		<LongDescription> A case class inherites another case class.
		</LongDescription>
		<Details>
			<![CDATA[
				<p>Case class inheritance will introduce buggy behavior. If you compare two instances from two case classes with a relationship of inheritance, they will definitely be different, 
				while in some cases you expect a same result. </p> 
			]]>
		</Details>
	</BugPattern>

	<!-- #3 Shunping Wang -->
	<BugPattern type="SCALA_CO_COMPARETO_RESULTS_MIN_VALUE">
		<ShortDescription>compareTo()/compare() returns Integer.MIN_VALUE
		</ShortDescription>
		<LongDescription>{1} returns Integer.MIN_VALUE, which can't be negated
		</LongDescription>
		<Details>
			<![CDATA[
  			<p> In some situation, this compareTo or compare method returns 
				the  constant Integer.MIN_VALUE, which is an exceptionally bad practice.
  				The only thing that matters about the return value of compareTo is the sign of the result.
    			But people will sometimes negate the return value of compareTo, expecting that this will negate
    			the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE.
    			So just return -1 rather than Integer.MIN_VALUE.
    		</p>
			]]>
		</Details>
	</BugPattern>
	<BugPattern type="SCALA_RV_NEGATING_RESULT_OF_COMPARETO">
		<ShortDescription>Negating the result of compareTo()/compare()
		</ShortDescription>
		<LongDescription>{1} negates the return value of {2}</LongDescription>
		<Details>
			<![CDATA[
  				<p> This code negatives the return value of a compareTo or compare method.
					This is a questionable or bad programming practice, since if the return
					value is Integer.MIN_VALUE, negating the return value won't
					negate the sign of the result. You can achieve the same intended result
					by reversing the order of the operands rather than by negating the results.
				</p>
			]]>
		</Details>
	</BugPattern>
	<BugPattern type="SCALA_CO_COMPARETO_NON_INT_RETURN">
		<ShortDescription>compareTo return none int</ShortDescription>
		<LongDescription>{0} defines {1.givenClass} and return none int
		</LongDescription>
		<Details>
			<![CDATA[
  				<p> method compareTo return value is not an int, change the method name to avoid missuderstanding
				</p>
			]]>
		</Details>
	</BugPattern>
	<BugPattern type="SCALA_EQ_COMPARETO_USE_OBJECT_EQUALS">
		<ShortDescription>Class defines compareTo(...) and uses
			Object.equals()
		</ShortDescription>
		<LongDescription>{0} defines {1.givenClass} and uses Object.equals()
		</LongDescription>
		<Details>
			<![CDATA[
  				<p> This class defines a <code>compareTo(...)</code> method but inherits its
  					<code>equals()</code> method from <code>java.lang.Object</code>.
    				Generally, the value of compareTo should return zero if and only if
    				equals returns true. If this is violated, weird and unpredictable
    				failures will occur in classes such as PriorityQueue.
    				In Java 5 the PriorityQueue.remove method uses the compareTo method,
    				while in Java 6 it uses the equals method.
    			</p>

				<p>From the JavaDoc for the compareTo method in the Comparable interface:
					<blockquote>
						It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.
						Generally speaking, any class that implements the Comparable interface and violates this condition
						should clearly indicate this fact. The recommended language
						is "Note: this class has a natural ordering that is inconsistent with equals."
					</blockquote>
				</p>
			]]>
		</Details>
	</BugPattern>

	<!-- #4 Shuang Qiu -->
	<BugPattern type="PartialInitialized" category="STYLE">
		<ShortDescription>Object initialization out of order.
		</ShortDescription>
		<LongDescription>Method of partially initialized sub-class object is
			invoked inside constructor of base class.
		</LongDescription>
		<Details>
	<![CDATA[
		<p> This detector finds unordered initialization sequence. </p>
		<p>
		Consider the following inherent hierarchy:
  			<code>
    			public class Base{
        			public Base() { foo(); }
        			public void foo() {};
    			}

    			public class Sub extends Base{
        			public Sub() {};
        			@Override
        			public void foo() {};
    			}
  			</code>
		Now the test code <code> Sub s = new Sub(); </code> constructor of <code>Base</code> will in fact invoke <code>foo()</code> of class <code>Sub</code> though object <code>s</code> is partially initialized.
		</p>
	]]>
		</Details>
	</BugPattern>

	<!-- #5 Zhenbang Liu -->
	<BugPattern type="RpC_REPEATED_CONDITIONAL_TEST1">
		<ShortDescription> repeated condition tests in scala
		</ShortDescription>
		<LongDescription>condition {2} repeated with {1}
		</LongDescription>
		<Details>
	<![CDATA[
		<p> In scala This method repeated conditional tests .  Make sure that you are comparing the right things.
		</p>
	]]>
		</Details>
	</BugPattern>

	<!-- #6 Tao Liu -->
	<BugPattern type="VAR_IN_HASHCODE">
		<ShortDescription>var used in hashCode
		</ShortDescription>
		<LongDescription>var used in hashCode.
		</LongDescription>
		<Details>  
		<![CDATA[  
        ]]>
		</Details>
	</BugPattern>

	<!-- #7 Chang Liu -->
	<BugPattern type="MISS_HASHCODE_FUNCTION">
		<ShortDescription>Class defines equals() without hashCode()
		</ShortDescription>
		<LongDescription>Class defines equals() without hashCode()
		</LongDescription>
		<Details>  
			<![CDATA[  
			]]>
		</Details>
	</BugPattern>
	<BugPattern type="MISS_NOT_EQUAL_FUNCTION">
		<ShortDescription>Class defines ==() without !=()</ShortDescription>
		<LongDescription>Class defines ==() without !=()</LongDescription>
		<Details>  
			<![CDATA[  
			]]>
		</Details>
	</BugPattern>
	<BugPattern type="INVALID_EQUAL_FUNCTION">
		<ShortDescription>Class defines wrong equals function
		</ShortDescription>
		<LongDescription>Class defines wrong equals function</LongDescription>
		<Details>  
			<![CDATA[  
			]]>
		</Details>
	</BugPattern>

	<!-- #8 Zhijing Wu -->
	<BugPattern type="STR_REPLACE_MIS">
		<ShortDescription>string.replace(char,char) misuse</ShortDescription>
		<LongDescription>string.replace(char,char) doesn't change the variable
			itself
		</LongDescription>
		<Details>  
		  <![CDATA[  
			<p>In <I>Programming in Scala</I>, 15.6</p>
			<p>
				string.replace(char,char)doesn't chang the variable itself,it only returns a new string value.So the use of it without a giving it to a new value
				can be seen as a misuse of this funcion.It can always make an unexpected result.
			</p>
		  ]]>
		</Details>
	</BugPattern>

	<!-- #9 Ling Sun -->
	<BugPattern type="QF_QUESTIONABLE_FOR_LOOP">
		<ShortDescription>Complicated, subtle or wrong increment in for-loop
		</ShortDescription>
		<LongDescription>Complicated, subtle or wrong increment in for-loop
			{1}
		</LongDescription>
		<Details>
	<![CDATA[
   		<p>Are you sure this for loop is incrementing the correct variable?
   		It appears that another variable is being initialized and checked
   		by the for loop.
		</p>
	]]>
		</Details>
	</BugPattern>

	<!-- #10 Mingrui Zhang -->
	<BugPattern type="EMPTY_RANGE">
		<ShortDescription>Using "to" method with decreasing parameters
		</ShortDescription>
		<LongDescription>Using "to" method with decreasing parameters, check
			if it's a bug
		</LongDescription>
		<Details>  
        <![CDATA[  
		<p>In Scala language:</p>
		<p><code>
			1 to 4 = Range(1,2,3,4)
		</code></p>
		<p><code>
			-1 to -4 = Range()
		</code></p>
		<p>
		However, some new scala programmers may have the wrong idea that:
		</p>
		<p><code>
			-1 to -4 = Range(-1,-2,-3,-4)	//this is wrong!
		</code></p>
		<p>
		This notification indicates that in your code you are generating empty
		Range object with decreasing parameters, which may be a bug.
		</p>
		<p>
		You can fix it by swaping the parameters:
		</p>
		<p><code>
			-4 to -1 = Range(-4,-3,-2,-1)
		</code></p>	
		<p>
		or setting appropriate step number:
		</p>
		<p><code>
			-1 to -4 by -1 = Range(-1,-2,-3,-4)
		</code></p>
        ]]>
		</Details>
	</BugPattern>

	<!-- #11 Gang Zhang -->
	<BugPattern type="GENERIC_MISUSED">
		<ShortDescription>GENERIC_MISUSED </ShortDescription>
		<LongDescription>GENERIC_MISUSED</LongDescription>
		<Details> 
 	<![CDATA[ 
 		<p> This detector finds methods misuse generic type to process type matching,but generic type 
 		will be erased during the compiling.
 	]]>
		</Details>
	</BugPattern>

	<BugPattern type="EXCEPTION_ORDER_PROBLEM">
		<ShortDescription>EXCEPTION_ORDER_PROBLEM </ShortDescription>
		<LongDescription>EXCEPTION_ORDER_PROBLEM</LongDescription>
		<Details> 
 	<![CDATA[ 
 		<p> This detector finds try-catch module in which there exist many exceptions to be caught
 		but exceptions order and exceptions class Hierarchy are ignored by mistake. 
 	]]>
		</Details>
	</BugPattern>

	<!-- #12 Mengping Li -->
	<BugPattern type="MISS_HASHCODE_METHOD">
		<ShortDescription>Miss orverride hashCode()</ShortDescription>
		<LongDescription>Override method equals, but forgetto overrivide
			hashCode()</LongDescription>
		<Details>
<![CDATA[  
<p>Forgetting to override hashCode as well, to ensure that if a equals b then a.hashCode == b.hashCode (the reverse proposition need not be valid).</p>
]]>
		</Details>
	</BugPattern>

	<BugPattern type="MISS_EXCEPITON_HANDLER">
		<ShortDescription>miss exception handler in actor</ShortDescription>
		<LongDescription>miss exception handler in actor</LongDescription>
		<Details>
<![CDATA[ 
</hr>
<p><b>e.g.</b></p>
<p>
1.&nbsp;&nbsp;object A extends Actor {    <br/>
2.&nbsp;&nbsp;&nbsp;&nbsp;def act() {    <br/>
3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;react {    <br/>
4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'hello =>    <br/>
5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Exception("Error!")    <br/>
6.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}    <br/>
7.&nbsp;&nbsp;&nbsp;&nbsp;}   <br/>
8.&nbsp;&nbsp;}<br/>
</p>
]]>
		</Details>
	</BugPattern>


	<!-- #13 Dingkun Yang -->
	<BugPattern type="SCALA_MATCH_WITHOUT_DEFAULT">
    <ShortDescription>Scala Match without default</ShortDescription>
    <LongDescription>Only in Scala language, match-case block does not have the default case.</LongDescription>
    <Details>
<![CDATA[
<p> Only in Scala language, match-case block does not have the default case. If an unintialized variable is directly valued by the result of this block, an error might emerge. </p>
]]>
    </Details>
  </BugPattern>
  
	<!-- #14 Weicheng Yang -->
	<BugPattern type="FIRST_LETTER_LOWER_IN_MATCH">
		<ShortDescription>In match, first letter lowercase can match any type.</ShortDescription>
		<LongDescription>In match, variable with first letter lowercase can match any type</LongDescription>
		<Details>
		</Details>
	</BugPattern>  

	<!-- #15 Puyu Duan -->
	<BugPattern type="METHOD_CONFUSING">  
		<ShortDescription>Confusing used method of Character</ShortDescription>  
		<LongDescription>May invoke Character's method which supposed to be String's, check if it is a mistake</LongDescription>  
		<Details>  
			<![CDATA[  
			]]>  
		</Details>  
	</BugPattern>
	
	<!-- #16 Jun Wang -->
	<BugPattern type="PACKAGE_OBJECT_MISUSE">
        <ShortDescription>Classes defined in a package object
        </ShortDescription>
        <LongDescription>Classes defined in a package object. Move it
            outside of the package object.
        </LongDescription>
        <Details>  
          <![CDATA[  
<p><I>https://issues.scala-lang.org/browse/SI-4344</I></p>
<p>Bug <I>https://issues.scala-lang.org/browse/SI-3999</I></p>
<p>In foo/bar/package.scala:</p>
<p>
package foo

package object bar {
  class Val(b: Boolean)
  implicit def boolean2Val(b: Boolean) = new Val(b)
}
</p>
<p>In foo/bar/A.scala:</p>
<p>
package foo.bar

class A {
  val s: Val = false
}
</p>
<p>
> scalac foo\bar\package.scala foo\bar\A.scala
foo\bar\A.scala:4: error: type mismatch;
 found   : Boolean(false)
 required: foo.bar.package.Val
Note that implicit conversions are not applicable because they are ambiguous:
 both method boolean2Val in package bar of type (b: Boolean)foo.bar.package.Val
 and method boolean2Val in package bar of type (b: Boolean)foo.bar.package.Val
 are possible conversion functions from Boolean(false) to foo.bar.package.Val
  val s: Val = false
               ^
one error found
> scalac -version
Scala compiler version 2.8.0.final -- Copyright 2002-2010, LAMP/EPFL
</p>
          ]]>
        </Details>
    </BugPattern>
	
	<BugPattern type="VAR_NOT_REASSIGNED">
        <ShortDescription>var not reassigned
        </ShortDescription>
        <LongDescription>var defined but not reassigned.
        </LongDescription>
        <Details>  
          <![CDATA[  

          ]]>
        </Details>
    </BugPattern>
    
    
    <!-- #17 Zilong Wang -->
	<BugPattern type="CIRCULAR_DEPENDENCY">  
	  <ShortDescription>Circular Dependencies</ShortDescription>  
	  <LongDescription>Class {0} has a circular dependency with other classes</LongDescription>  
	  <Details>  
		  <![CDATA[  
<p>Circular dependencies can cause many unwanted effects in software programs. Most problematic from a software design point of view is the tight coupling of the mutually dependent modules which reduces or makes impossible the separate re-use of a single module.</p>

<p>Circular dependencies can cause a domino effect when a small local change in one module spreads into other modules and has unwanted global effects (program errors, compile errors). Circular dependencies can also result in infinite recursions or other unexpected failures.</p>

<p>Circular dependencies may also cause memory leaks by preventing certain very primitive automatic garbage collectors (those that use reference counting) from deallocating unused objects.</p>
		  ]]>  
	  </Details>  
  </BugPattern>
	
		
	<!-- #18 Yintian Wang -->
	<BugPattern type="SCALA_SBC_SAME_IFBRANCH_CODE">
    <ShortDescription>same code for if branch</ShortDescription>
    <LongDescription>same code for if branch</LongDescription>
    <Details>
      <![CDATA[
    <p>The codes for different if branch of scala are identical.
</p>

]]>
    </Details>
  	 </BugPattern>
  	 
     <BugPattern type="SCALA_SBC_SAME_MATCHBRANCH_CODE">
    <ShortDescription>same code for match branch</ShortDescription>
    <LongDescription>same code for match branch</LongDescription>
    <Details>
      <![CDATA[
    <p>The codes for different match branch of scala are identical.
</p>

]]>
    </Details>
  </BugPattern>
	
	<!-- #19 Renjie Qiu -->
	<BugPattern type="SCALA_RECEIVE_IN_LOOP">
    <ShortDescription>Use 'loop' with 'receive' in Scala Actor.</ShortDescription>
    <LongDescription>Use 'loop' with 'receive' in Scala Actor. Use 'loop' with 'react' or 'while(true)' with 'receive' instead.</LongDescription>
    <Details>
<![CDATA[
Use 'loop' with 'receive' in Scala Actor. Use 'loop' with 'react' or 'while(true)' with 'receive' instead.
]]>
    </Details>
  </BugPattern>
  
  <!-- #20 Yuan Zhao -->
  <BugPattern type="SCALA_IMPLICIT_CONVERSION">
    <ShortDescription>Yuan Zhao's detector.</ShortDescription>
    <LongDescription></LongDescription>
    <Details>
<![CDATA[
]]>
    </Details>
  </BugPattern>
  
	<!-- #21 Zheng Wang-->
	<BugPattern type="STORE_BEFORE_RETURN">  
	  <ShortDescription>Store Before Return Is Unnecessary</ShortDescription>  
	  <LongDescription>Store Before Return Is Unnecessary, It is a bad practice</LongDescription>  
	  <Details>  
		  <![CDATA[  
<p>
This method stores the return result in a local variable, and then immediately returns the local variable. 
It would be simpler just to return the value that is assigned to the local variable, directly. 
</p>

<p><pre>
object A
{
	def test():String=
	{
	 var s="abc";
	 s;
	 }
	def main(args: Array[String])
	{
		println(test());
	}
}
</pre></p>

<p>
s is Unnecessary
</p>

<p><pre>
object A
{
	def test():String=
	{
	 "abc";
	 }
	def main(args: Array[String])
	{
		println(test());
	}
}
</pre></p>

<p>
is prefered.
</p>

]]>  
	  </Details>  
  </BugPattern> 
  
	<!-- #22 Xi Jia -->
	<BugPattern type="IMPLICIT_MISUSE">  
		<ShortDescription>mistake of syntactic sugar caused by implicit casts</ShortDescription>  
		<LongDescription>mistake of syntactic sugar caused by implicit casts may happened, check if it is a mistake</LongDescription>  
		<Details>  
			<![CDATA[  
			]]>  
		</Details>  
	</BugPattern> 
	
	
	<!-- #23 Xinglong Tan -->
	<BugPattern type="BIT_IOR_SIGNED_BYTE">
		<ShortDescription>Bitwise OR of signed byte value</ShortDescription>
		<LongDescription>Bitwise OR of signed byte computed in {1}
		</LongDescription>
		<Details>
<![CDATA[
<p>Loads a byte value (e.g., a value loaded from a byte array or returned by a method with return type byte) and performs a bitwise OR with that value. Byte values are sign extended to 32 bits before any any bitwise operations are performed on the value. Thus, if b[0] contains the value 0xff, and x is initially 0, then the code ((x &lt&lt 8) | b[0]) will sign extend 0xff to get 0xffffffff, and thus give the value 0xffffffff as the result.</p>
]]>
		</Details>
	</BugPattern>
	
	
	<!-- #24 Jieliang Dong -->
	<BugPattern type="RETURN_MISSING">  
		<ShortDescription>missing return value</ShortDescription>  
		<LongDescription>missing return value, check if it is a mistake</LongDescription>  
		<Details>  
			<![CDATA[  
			]]>  
		</Details>  
	</BugPattern> 
	
	

	<!-- ************************* Bug Codes ***************************************** -->
	<!-- common bug code -->
	<BugCode abbrev="SCALA">Programming mistake in Scala</BugCode>

	<!-- #1 Qi Wang -->
	<BugCode abbrev="VCOMP">Value Comparison</BugCode>
	<BugCode abbrev="TE">Type erasion</BugCode>
	<BugCode abbrev="MAT">Pattern match</BugCode>
	<BugCode abbrev="FUNC">Function</BugCode>
	<BugCode abbrev="CD">Class Definition</BugCode>
	<BugCode abbrev="CO">Collection operation</BugCode>
	<BugCode abbrev="EXPR">Expression</BugCode>
	<BugCode abbrev="FC">Function call</BugCode>

	<!-- #2 Yudi Zheng -->

	<!-- #3 Shunping Wang -->
	<BugCode abbrev="SCALA_RV">Bad use of return value from method in scala
	</BugCode>
	<BugCode abbrev="SCALA_Co">Problems with implementation of compareTo()
	</BugCode>
	<BugCode abbrev="SCALA_Eq">Problems with implementation of equals()
	</BugCode>

	<!-- #4 Shuang Qiu -->
	<BugCode abbrev="PO">Object initialization out of order.</BugCode>

	<!-- #5 Zhenbang Liu -->
	<BugCode abbrev="RPC1">Found RPC in scala</BugCode>

	<!-- #6 Tao Liu -->

	<!-- #7 Chang Liu -->

	<!-- #8 Zhijing Wu -->

	<!-- #9 Ling Sun -->
	<BugCode abbrev="QF">Questionable for loops</BugCode>

	<!-- #10 Mingrui Zhang -->

	<!-- #11 Gang Zhang -->
	<BugCode abbrev="MUG">GENERIC_MISUSED</BugCode>
	<BugCode abbrev="EOD">EXCEPTION_ORDER_PROBLEM</BugCode>

	<!-- #12 Mengping Li -->
	
	<!-- #13 Dingkun Yang -->
	<BugCode abbrev="S_MWD">Scala match without default</BugCode>
	
	<!-- #14 Weicheng Yang -->
	<BugCode abbrev="VCOMP">Value Comparison</BugCode>
	
	<!-- #15 Puyu Duan -->
	
	<!-- #16 Jun Wang -->
	
	<!-- #17 Zilong Wang -->
	
	<!-- #18 Yintian Wang -->
	<BugCode abbrev="SCALA_SBC">Same branch code for scala</BugCode>

	<!-- #19 Renjie Qiu -->
	<BugCode abbrev="SRIL">Found unprotected logging</BugCode>
	
	<!-- #20 Yuan Zhao -->
	
	<!-- #21 Zheng Wang-->
	
	<!-- #22 Xi Jia -->
	
	<!-- #23 Xinglong Tan -->
	<BugCode abbrev="BISB">Suspicious bitwise expression</BugCode>
	
	<!-- #24 Jieliang Dong -->
	

</MessageCollection>